name: Deploy Spring Boot Application

on:
  push:
    branches:
      - main  # Trigger when merging到main分支时触发

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Check out the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Java environment
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      # Set up Maven cache
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven

      # Build the application
      - name: Build with Maven
        run: |
          echo "Running Maven build..."
          mvn clean package -DskipTests
          if [ $? -ne 0 ]; then
            echo "Maven build failed!"
            exit 1
          fi
          echo "Maven build completed successfully."

          # Check if target directory exists and contains the JAR file
          echo "Checking for generated JAR file..."
          if [ -d target ] && [ -f target/xiao-potato-0.0.1-SNAPSHOT.jar ]; then
            echo "Build successful: JAR file found in target directory."
          else
            echo "Build failed: JAR file not found in target directory!"
            exit 1
          fi

      # Deploy to server using SSH and password
      - name: Deploy to Server
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.POTATO_HOST }}
          username: ${{ secrets.POTATO_USER }}
          password: ${{ secrets.POTATO_KEY }}
          port: 22
          script: |
            # Remove old JAR file if it exists
            echo "Deleting old JAR file if it exists..."
            sshpass -p "${{ secrets.POTATO_KEY }}" ssh -o StrictHostKeyChecking=no ${{ secrets.POTATO_USER }}@${{ secrets.POTATO_HOST }} "rm -f ~/xiao-potato-0.0.1-SNAPSHOT.jar"

            # Upload the new JAR file
            echo "Uploading new JAR file to the home directory..."
            sshpass -p "${{ secrets.POTATO_KEY }}" scp -o StrictHostKeyChecking=no ${{ github.workspace }}/target/xiao-potato-0.0.1-SNAPSHOT.jar ${{ secrets.POTATO_USER }}@${{ secrets.POTATO_HOST }}:~

            # Wait for the file to appear
            sshpass -p "${{ secrets.POTATO_KEY }}" ssh -o StrictHostKeyChecking=no ${{ secrets.POTATO_USER }}@${{ secrets.POTATO_HOST }} "
            while [ ! -f ~/xiao-potato-0.0.1-SNAPSHOT.jar ]; do
              echo 'Waiting for JAR file to appear...'
              sleep 5
            done
            echo 'File upload completed.'
            "

            # Stop old application running on port 8081
            echo "Checking for existing application on port 8081..."
            sshpass -p "${{ secrets.POTATO_KEY }}" ssh -o StrictHostKeyChecking=no ${{ secrets.POTATO_USER }}@${{ secrets.POTATO_HOST }} "
            PID=\$(lsof -t -i:8081)
            if [ ! -z \"\$PID\" ]; then
              echo 'Killing process \$PID on port 8081'
              kill -9 \$PID
            else
              echo 'No process running on port 8081'
            fi
            screen -S springboot-app -X quit || true
            "

            # Create a script to run the application
            echo "Creating startup script..."
            sshpass -p "${{ secrets.POTATO_KEY }}" ssh -o StrictHostKeyChecking=no ${{ secrets.POTATO_USER }}@${{ secrets.POTATO_HOST }} "
            cat <<EOF > /tmp/start-app.sh
            #!/bin/bash
            export ALIYUN_ACCESS_KEY_ID=${{ secrets.ALIYUN_ACCESS_KEY_ID }}
            export ALIYUN_ACCESS_KEY_SECRET=${{ secrets.ALIYUN_ACCESS_KEY_SECRET }}
            java -Dspring.profiles.active=prod \
                 -Daliyun.accessKeyId=\$ALIYUN_ACCESS_KEY_ID \
                 -Daliyun.accessKeySecret=\$ALIYUN_ACCESS_KEY_SECRET \
                 -jar ~/xiao-potato-0.0.1-SNAPSHOT.jar
            EOF
            chmod +x /tmp/start-app.sh
            "

            # Start the application in a new screen session
            sshpass -p "${{ secrets.POTATO_KEY }}" ssh -o StrictHostKeyChecking=no ${{ secrets.POTATO_USER }}@${{ secrets.POTATO_HOST }} "
            screen -dmS springboot-app /tmp/start-app.sh
            "
